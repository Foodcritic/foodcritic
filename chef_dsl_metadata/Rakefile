require "appraisal"
require "fileutils" unless defined?(FileUtils)
require "ffi_yajl" unless defined?(FFI_Yajl)

task :generate_chef_metadata do
  require_chef
  chef_dsl_metadata = { dsl_methods: chef_dsl_methods,
                        node_methods: chef_node_methods,
                        actions: chef_resource_actions,
                        attributes: chef_resource_attributes }
  json = FFI_Yajl::Encoder.encode(chef_dsl_metadata, pretty: true)
  File.open("chef_#{Chef::VERSION}.json", "w") { |f| f.write(json) }
end

def require_chef
  require "chef"
  require "chef/mixin/convert_to_class_name"
  include Chef::Mixin::ConvertToClassName
end

def chef_dsl_methods
  (chef_dsl_module.included_modules.map(&:public_instance_methods)).flatten.sort.uniq
end

def chef_node_methods
  (Chef::Node.public_instance_methods + Chef::Node::Attribute.public_instance_methods).flatten.sort.uniq
end

def chef_resource_actions
  chef_resources do |resource_klazz, resource|
    next if [
        "Chef::Resource::WindowsScript",
        "Chef::Resource::WindowsPackage",
      ].include?(resource.to_s)

    instance = resource.new("dsl", nil)
    actions = Array(instance.action).map(&:to_sym)
    if instance.respond_to?(:allowed_actions)
      actions += instance.allowed_actions
    end
    [convert_to_snake_case(resource_klazz.to_s), actions.sort.uniq]
  end
end

def chef_resource_attributes
  chef_resources do |resource_klazz, resource|
    resource_name = convert_to_snake_case(resource_klazz.to_s)
    attributes = resource.public_instance_methods(true)
    attributes = add_windows_securable_attributes(resource_name, attributes)

    [resource_name, attributes.sort]
  end
end

private

def add_windows_securable_attributes(resource_name, attributes)
  atts = %i{rights deny_rights inherits} + attributes
  atts << :files_rights if resource_name == "remote_directory"
  atts
end

def chef_dsl_module
  if Chef.const_defined?("DSL")
    Chef::DSL::Recipe
  else
    Chef::Mixin::RecipeDefinitionDSLCore
  end
end

def chef_resources
  resources = Chef::Resource.constants.sort.map do |resource_klazz|
    resource = Chef::Resource.const_get(resource_klazz)
    if resource.respond_to?(:public_instance_methods) &&
        resource.ancestors.include?(Chef::Resource) &&
        ! %i{LWRPBase UnresolvedSubscribes}.include?(resource_klazz)
      yield resource_klazz, resource
    end
  end
  Hash[resources.compact]
end
